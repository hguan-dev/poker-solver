diff --git a/src/cards/Deck.cpp b/src/cards/Deck.cpp
index bc26520..2dd26c9 100644
--- a/src/cards/Deck.cpp
+++ b/src/cards/Deck.cpp
@@ -16,7 +16,6 @@ Deck::Deck() : cards{}, rng(std::random_device{}()), activeSize(52)
 Card Deck::popTop()
 {
     if (activeSize <= 0) { throw std::out_of_range("No cards left in deck"); }
-
     return cards[--activeSize];
 }
 
diff --git a/src/game/HandEvaluator.cpp b/src/game/HandEvaluator.cpp
index f06065a..0e24f66 100644
--- a/src/game/HandEvaluator.cpp
+++ b/src/game/HandEvaluator.cpp
@@ -5,11 +5,11 @@ std::array<Card, 7> HandEvaluator::mergeHand(const std::array<Card, 2> &hand, co
 {
     std::array<Card, 7> fullHand;
     std::copy(hand.begin(), hand.end(), fullHand.begin());
-    std::copy(communityCards.begin(), communityCards.end(), fullHand.begin() + 2);
+    std::copy(communityCards.begin(), communityCards.end(), fullHand.begin() + hand.size());
     return fullHand;
 }
 
-int getSuitValue(char suit)
+constexpr int getSuitValue(char suit)
 {
     switch (suit) {
     case 'H':
@@ -21,7 +21,7 @@ int getSuitValue(char suit)
     case 'C':
         return 3;
     default:
-        return 0;
+        return 999;// Should never get here...
     }
 }
 
@@ -30,46 +30,35 @@ int HandEvaluator::evaluateHand(const std::array<Card, 2> &hand, const std::arra
 {
     std::array<Card, 7> fullHand = mergeHand(hand, communityCards);
 
-    int cardIndices[7] = { 0 };// Encodes rank & suit for hashing
+    std::array<int, 7> cardIndices{};
     int suitHash = 0;
+    std::array<int, 4> suitBinary{};
+    static constexpr std::array<int, 4> SUIT_SHIFT = { 1, 8, 64, 512 };
 
-    // Convert cards to numerical representation
-    for (int i = 0; i < 7; i++) {
+    for (size_t i = 0; i < fullHand.size(); i++) {
         int rankValue = fullHand[i].getValue() - 2;
         int suitValue = getSuitValue(fullHand[i].getSuit());
 
         cardIndices[i] = (rankValue * 4) + suitValue;
-        suitHash += (1 << (suitValue * 3));
+        suitHash += SUIT_SHIFT[suitValue];// Precomputed bit shift
+        suitBinary[suitValue] |= (1 << rankValue);
     }
 
-    // Check if the hand is a flush
-    if (SUITS_TABLE[suitHash]) {
-        int suitBinary[4] = { 0 };
-
-        for (int i = 0; i < 7; i++) {
-            int suit = cardIndices[i] & 0x3;
-            int rank = cardIndices[i] / 4;
-            suitBinary[suit] |= (1 << rank);
-        }
-
-        return FLUSH_TABLE[suitBinary[SUITS_TABLE[suitHash] - 1]];
-    }
+    if (SUITS_TABLE[suitHash]) { return FLUSH_TABLE[suitBinary[SUITS_TABLE[suitHash] - 1]]; }
 
-    // Convert to quinary representation (number of each rank present)
-    unsigned char rankQuinary[13] = { 0 };
-    for (int i = 0; i < 7; i++) { rankQuinary[cardIndices[i] / 4]++; }
+    std::array<unsigned char, 13> rankQuinary{};
+    for (const auto &index : cardIndices) { rankQuinary[index / 4]++; }
 
-    int hash = hashQuinaryResult(rankQuinary);
-    return NOFLUSH_TABLE[hash];
+    return NOFLUSH_TABLE[hashQuinaryResult(rankQuinary)];
 }
 
 // Computes a unique hash for a hand based on rank frequency using precomputed DP table
-int HandEvaluator::hashQuinaryResult(const unsigned char rankQuinary[])
+int HandEvaluator::hashQuinaryResult(const std::array<unsigned char, 13> &rankQuinary)
 {
     int sum = 0;
     int remainingCards = 7;
 
-    for (int rank = 0; rank < 13; rank++) {
+    for (size_t rank = 0; rank < rankQuinary.size(); rank++) {
         sum += DP_TABLE[rankQuinary[rank]][13 - rank - 1][remainingCards];
         remainingCards -= rankQuinary[rank];
 
diff --git a/src/game/HandEvaluator.hpp b/src/game/HandEvaluator.hpp
index 80953f6..5c3d35a 100644
--- a/src/game/HandEvaluator.hpp
+++ b/src/game/HandEvaluator.hpp
@@ -8,8 +8,7 @@ class HandEvaluator
 {
   public:
     int evaluateHand(const std::array<Card, 2> &hand, const std::array<Card, 5> &communityCards);
-    int hashQuinaryResult(const unsigned char quinary[]);
-
+    int hashQuinaryResult(const std::array<unsigned char, 13> &rankQuinary);
 
   private:
     std::array<Card, 7> mergeHand(const ::std::array<Card, 2> &hand, const std::array<Card, 5> &communityCards);
